CREATE OR REPLACE PACKAGE OPERATIONS_UTILS AS
    FUNCTION GET_OPERATIONS (
        DEPARTMENT_ID IN OPERATION.DEPARTMENT_ID%TYPE,
        SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION GET_ALL_OPERATIONS(
        SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2;

    PROCEDURE ADD_OPERATION (
        DEPARTMENT_ID IN OPERATION.DEPARTMENT_ID%TYPE,
        DRAWING_ID IN OPERATION.DRAWING_ID%TYPE,
        DESCRIPTION IN OPERATION.DESCRIPTION%TYPE,
        DURATION IN OPERATION.DURATION%TYPE,
        NUMBER_OF_RESOURCES IN OPERATION.NUMBER_OF_RESOURCES%TYPE
    );
END;
/

CREATE OR REPLACE PACKAGE BODY OPERATIONS_UTILS AS
    FUNCTION GET_OPERATIONS(
        DEPARTMENT_ID IN OPERATION.DEPARTMENT_ID%TYPE,
        SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2 IS
        RESULT_LIST VARCHAR2(32767);
    BEGIN
        FOR ROW IN (
            SELECT
                OPERATION.ID,
                OPERATION.DESCRIPTION
            FROM
                OPERATION
            WHERE
                OPERATION.DEPARTMENT_ID = GET_OPERATIONS.DEPARTMENT_ID
        ) LOOP
            RESULT_LIST := RESULT_LIST
                || ROW.ID
                || SEPARATOR
                || ROW.DESCRIPTION
                || NEW_LINE;
        END LOOP;
        RETURN RESULT_LIST;
    END;

    FUNCTION GET_ALL_OPERATIONS(
        SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2 IS
        RESULT_LIST VARCHAR2(32767);
    BEGIN
        FOR ROW IN (
            SELECT
                OPERATION.ID,
                OPERATION.DESCRIPTION
            FROM
                OPERATION
        ) LOOP
            RESULT_LIST := RESULT_LIST
                || ROW.ID
                || SEPARATOR
                || ROW.DESCRIPTION
                || NEW_LINE;
        END LOOP;
        RETURN RESULT_LIST;
    END;

    PROCEDURE ADD_OPERATION (
        DEPARTMENT_ID IN OPERATION.DEPARTMENT_ID%TYPE,
        DRAWING_ID IN OPERATION.DRAWING_ID%TYPE,
        DESCRIPTION IN OPERATION.DESCRIPTION%TYPE,
        DURATION IN OPERATION.DURATION%TYPE,
        NUMBER_OF_RESOURCES IN OPERATION.NUMBER_OF_RESOURCES%TYPE
    ) IS
    BEGIN
        INSERT INTO OPERATION (
            DEPARTMENT_ID,
            DRAWING_ID,
            DESCRIPTION,
            DURATION,
            NUMBER_OF_RESOURCES
        ) VALUES (
            DEPARTMENT_ID,
            DRAWING_ID,
            DESCRIPTION,
            DURATION,
            NUMBER_OF_RESOURCES
        );
    END;
END;
/

CREATE OR REPLACE PACKAGE TOOLS_UTILS AS
    FUNCTION GET_ALL_TOOLS(
        SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2;

    PROCEDURE ADD_TOOL (
        CODE IN TOOL.CODE%TYPE,
        DESCRIPTION IN TOOL.DESCRIPTION%TYPE,
        ALLOCATED IN TOOL.ALLOCATED%TYPE,
        REMAINING IN TOOL.REMAINING%TYPE
    );

    FUNCTION GET_REMAINING_TOOLS(
        SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION GET_TOOLS_FOR_OPERATION (
        OPERATION_ID IN OPERATION.ID%TYPE,
        SEPARATOR IN VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION GET_TOOLS_FOR_ALL_OPERATIONS (
        OPERATION_SEPARATOR IN VARCHAR2,
        TOOL_SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION GET_TOOLS_FOR_ALL_EXTRADITIONS (
        EXTRADITION_SEPARATOR IN VARCHAR2,
        TOOL_SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2;
END;
/

CREATE OR REPLACE PACKAGE BODY TOOLS_UTILS AS
    FUNCTION GET_ALL_TOOLS(
        SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2 IS
        RESULT_LIST VARCHAR2(32767);
    BEGIN
        FOR ROW IN (
            SELECT
                TOOL.CODE,
                TOOL.DESCRIPTION
            FROM
                TOOL
        ) LOOP
            RESULT_LIST := RESULT_LIST
                || ROW.CODE
                || SEPARATOR
                || ROW.DESCRIPTION
                || NEW_LINE;
        END LOOP;
        RETURN RESULT_LIST;
    END;

    PROCEDURE ADD_TOOL (
        CODE IN TOOL.CODE%TYPE,
        DESCRIPTION IN TOOL.DESCRIPTION%TYPE,
        ALLOCATED IN TOOL.ALLOCATED%TYPE,
        REMAINING IN TOOL.REMAINING%TYPE
    ) IS
    BEGIN
        INSERT INTO TOOL (
            CODE,
            DESCRIPTION,
            ALLOCATED,
            REMAINING
        ) VALUES (
            CODE,
            DESCRIPTION,
            ALLOCATED,
            REMAINING
        );
    END;

    FUNCTION GET_REMAINING_TOOLS(
        SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2 IS
        RESULT_LIST VARCHAR2(32767);
    BEGIN
        FOR ROW IN (
            SELECT
                TOOL.CODE,
                TOOL.REMAINING
            FROM
                TOOL
        ) LOOP
            RESULT_LIST := RESULT_LIST
                || ROW.CODE
                || SEPARATOR
                || ROW.REMAINING
                || NEW_LINE;
        END LOOP;
        RETURN RESULT_LIST;
    END;

    FUNCTION GET_TOOLS_FOR_OPERATION (
        OPERATION_ID IN OPERATION.ID%TYPE,
        SEPARATOR IN VARCHAR2
    ) RETURN VARCHAR2 IS
        RESULT_LIST VARCHAR2(32767);
    BEGIN
        FOR ROW IN (
            SELECT
                TOOL.CODE,
                TOOL_OPERATION_EXPECTED.TOOL_COUNT
            FROM
                TOOL_OPERATION_EXPECTED
            INNER JOIN TOOL ON TOOL_OPERATION_EXPECTED.TOOL_ID = TOOL.ID
            WHERE
                TOOL_OPERATION_EXPECTED.OPERATION_ID = GET_TOOLS_FOR_OPERATION.OPERATION_ID
        ) LOOP
            RESULT_LIST := RESULT_LIST
                || ROW.CODE
                || ' ('
                || ROW.TOOL_COUNT
                || ')'
                || SEPARATOR;
        END LOOP;
        RETURN RESULT_LIST;
    END;

    FUNCTION GET_TOOLS_FOR_ALL_OPERATIONS (
        OPERATION_SEPARATOR IN VARCHAR2,
        TOOL_SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2 IS
        RESULT_LIST VARCHAR2(32767);
    BEGIN
        FOR ROW IN (
            SELECT
                OPERATION.ID
            FROM
                OPERATION
        ) LOOP
            RESULT_LIST := RESULT_LIST
                || ROW.ID
                || OPERATION_SEPARATOR
                || GET_TOOLS_FOR_OPERATION(ROW.ID, TOOL_SEPARATOR)
                || NEW_LINE;
        END LOOP;
        RETURN RESULT_LIST;
    END;

    FUNCTION GET_TOOLS_FOR_ALL_EXTRADITIONS (
        EXTRADITION_SEPARATOR IN VARCHAR2,
        TOOL_SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2 IS
        RESULT_LIST VARCHAR2(32767);
    BEGIN
        FOR ROW IN (
            SELECT
                EXTRADITION.ID,
                EXTRADITION.OPERATION_ID
            FROM
                EXTRADITION
        ) LOOP
            RESULT_LIST := RESULT_LIST
                || ROW.ID
                || EXTRADITION_SEPARATOR
                || GET_TOOLS_FOR_OPERATION(ROW.OPERATION_ID, TOOL_SEPARATOR)
                || NEW_LINE;
        END LOOP;
        RETURN RESULT_LIST;
    END;
END;
/

CREATE OR REPLACE PACKAGE EXTRADITIONS_UTILS AS
    FUNCTION GET_EXTRADITIONS_BY_DATE(
        FROM_DATE IN EXTRADITION.EXTRADITION_DATA%TYPE,
        TO_DATE IN EXTRADITION.EXTRADITION_DATA%TYPE,
        SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION GET_ALL_EXTRADITIONS(
        SEPARATOR IN VARCHAR2
    ) RETURN VARCHAR2;

    PROCEDURE ADD_EXTRADITION (
        PRODUCT_ID IN INTEGER,
        EMPLOYEE_ID IN INTEGER,
        OPERATION_ID IN INTEGER,
        WORK_ORDER_ID IN INTEGER,
        ISSUED_QUANTITY IN INTEGER,
        EXTRADITION_DATA IN DATE
    );
END;
/

CREATE OR REPLACE PACKAGE BODY EXTRADITIONS_UTILS AS
    FUNCTION GET_EXTRADITIONS_BY_DATE(
        FROM_DATE IN EXTRADITION.EXTRADITION_DATA%TYPE,
        TO_DATE IN EXTRADITION.EXTRADITION_DATA%TYPE,
        SEPARATOR IN VARCHAR2,
        NEW_LINE IN VARCHAR2
    ) RETURN VARCHAR2 IS
        RESULT_LIST VARCHAR2(32767);
    BEGIN
        FOR ROW IN (
            SELECT
                EXTRADITION.ID,
                EXTRADITION.EXTRADITION_DATA
            FROM
                EXTRADITION
            WHERE
                EXTRADITION.EXTRADITION_DATA >= FROM_DATE AND EXTRADITION.EXTRADITION_DATA <= TO_DATE
        ) LOOP
            RESULT_LIST := RESULT_LIST
                || ROW.ID
                || SEPARATOR
                || ROW.EXTRADITION_DATA
                || NEW_LINE;
        END LOOP;
        RETURN RESULT_LIST;
    END;

    FUNCTION GET_ALL_EXTRADITIONS(
        SEPARATOR IN VARCHAR2
    ) RETURN VARCHAR2 IS
        RESULT_LIST VARCHAR2(32767);
    BEGIN
        FOR ROW IN (
            SELECT
                EXTRADITION.ID
            FROM
                EXTRADITION
        ) LOOP
            RESULT_LIST := RESULT_LIST
                || ROW.ID
                || SEPARATOR;
        END LOOP;
        RETURN RESULT_LIST;
    END;

    PROCEDURE ADD_EXTRADITION (
        PRODUCT_ID IN INTEGER,
        EMPLOYEE_ID IN INTEGER,
        OPERATION_ID IN INTEGER,
        WORK_ORDER_ID IN INTEGER,
        ISSUED_QUANTITY IN INTEGER,
        EXTRADITION_DATA IN DATE
    ) IS
    BEGIN
        INSERT INTO EXTRADITION (
            PRODUCT_ID,
            EMPLOYEE_ID,
            OPERATION_ID,
            WORK_ORDER_ID,
            ISSUED_QUANTITY,
            EXTRADITION_DATA
        ) VALUES (
            PRODUCT_ID,
            EMPLOYEE_ID,
            OPERATION_ID,
            WORK_ORDER_ID,
            ISSUED_QUANTITY,
            EXTRADITION_DATA
        );
    END;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(OPERATIONS_UTILS.GET_OPERATIONS(1, ' - ', chr(10)));
    DBMS_OUTPUT.PUT_LINE(TOOLS_UTILS.GET_ALL_TOOLS(' - ', chr(10)));
    TOOLS_UTILS.ADD_TOOL(101, 'TEST', 404, 228);
    DBMS_OUTPUT.PUT_LINE(TOOLS_UTILS.GET_REMAINING_TOOLS(' - ', CHR(10)));
    DBMS_OUTPUT.PUT_LINE(GET_EXTRADITIONS_BY_DATE(TO_DATE('09-01-2022', 'MM-DD-YYYY'), TO_DATE('10-01-2022', 'MM-DD-YYYY'), ' - ', CHR(10)));
    DBMS_OUTPUT.PUT_LINE(OPERATIONS_UTILS.GET_ALL_OPERATIONS(' - ', chr(10)));
    OPERATIONS_UTILS.ADD_OPERATION(1, 1, 'TEST', TO_DSINTERVAL('13 12:34:56'), 2);
    DBMS_OUTPUT.PUT_LINE(TOOLS_UTILS.GET_TOOLS_FOR_OPERATION(1, ', '));
    DBMS_OUTPUT.PUT_LINE(TOOLS_UTILS.GET_TOOLS_FOR_ALL_OPERATIONS(' - ', ', ', chr(10)));
    DBMS_OUTPUT.PUT_LINE(TOOLS_UTILS.GET_TOOLS_FOR_ALL_EXTRADITIONS(' - ', ', ', chr(10)));
    DBMS_OUTPUT.PUT_LINE(GET_ALL_EXTRADITIONS(', '));
    ADD_EXTRADITION(1, 1, 1, 1, 5, TO_DATE('11-11-2022', 'MM-DD-YYYY'));
END;
/